bloco principal(){
    inteiro numero = 50;
    inteiro numeroNegativo = -50;
    real valor = 10.3;
    real valorNegativo = -10.3;
    booleano b1 = verdadeiro;
    booleano b2 = falso;
    texto nome = "Maria";
    
    escreva("Teste: O texto abaixo deveria ser: Meu Texto -50");
    procedureReal("Meu Texto", valorNegativo);

    executaOperacoes();
    
    escreva("Teste: Nem todo retorno precisa associar vari√°vel");
    funcaoEhMaior(numero, numeroNegativo);
    
    boolean resultado = funcaoEhMaior(numero, numeroNegativo);
	escreva("Teste: O texto abaixo deveria ser: verdadeiro");
	escreva(resultado);

    resultado = funcaoEhMaiorQueCinco(valorNegativo);
	escreva("Teste: O texto abaixo deveria ser: falso");
	escreva(resultado);

    inteiro retorno = naoExecutaAposRetorno();
	escreva("Teste: O texto abaixo deveria ser: 1");
	escreva(retorno);

    testaSeCompleto();

    testaFibonnaci();
}

bloco testaSeCompleto() {
    escreva("Teste: O texto abaixo deveria ser: Menor que 1");
	testaSe(0)
    escreva("Teste: O texto abaixo deveria ser: Menor que 5");
    testaSe(1)
    escreva("Teste: O texto abaixo deveria ser: Maior igual a 5");
    testaSe(10)
}

bloco testaSe(inteiro numero) {
    se(numero < 1){
        escreva("Menor que 1");
    } senao se(numero < 5){
        escreva("Menor que 5");
    } senao {
        escreva("Maior igual a 5");
    } 
}

bloco testaFibonnaci() {
    escreva("Teste: Os 3 textos abaixo deveriam ser: 55");
    inteiro fibRec = fibonacci_recursivo(10);
	escreva(fibRec);

    inteiro fibWhile = fibonacci_while(10);
	escreva(fibWhile);

    inteiro fibFor = fibonacci_for(10);
	escreva(fibFor);
}

bloco chamaProcedure(texto meuTexto , real valor) {
	escreva(meuTexto + valor);
}

bloco executaOperacoes() {
    inteiro doisInteiro = 2
    escreva("Teste: O texto abaixo deveria ser: 3");
    escreva(1 + doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: -1");
    escreva(1 - doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: 6");
    escreva(3 * doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: 1");
    escreva(3 / doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: 1");
    escreva(5 % doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: 1");
    escreva(5 % doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(2 == doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: falso");
    escreva(2 <> doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: falso");
    escreva(2 > doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(2 >= doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: falso");
    escreva(2 < doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(2 <= doisInteiro);

    real doisReal = 2
    escreva("Teste: O texto abaixo deveria ser: 3.0");
    escreva(1.0 + doisReal);
    escreva("Teste: O texto abaixo deveria ser: -1.0");
    escreva(1.0 - doisReal);
    escreva("Teste: O texto abaixo deveria ser: 6.0");
    escreva(3.0 * doisReal);
    escreva("Teste: O texto abaixo deveria ser: 1.5");
    escreva(3.0 / doisReal);
    escreva("Teste: O texto abaixo deveria ser: 1.0");
    escreva(5.0 % doisReal);
    escreva("Teste: O texto abaixo deveria ser: falso");
    escreva(5.0 == doisReal);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(5.0 <> doisReal);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(5.0 > doisReal);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(5.0 >= doisReal);
    escreva("Teste: O texto abaixo deveria ser: falso");
    escreva(5.0 < doisReal);
    escreva("Teste: O texto abaixo deveria ser: falso");
    escreva(5.0 <= doisReal);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(2.0 <= doisReal);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(2.0 >= doisReal);
    
}

bloco inteiro funcaoEhMaior(inteiro n1, inteiro n2) {
	retorna n1 > n2;
}

bloco real funcaoEhMaiorQueCinco(real n1) {
	retorna n1 > 5.0;
}

bloco inteiro naoExecutaAposRetorno() {
	retorna 1;
    retorna 2;
}

bloco inteiro fibonacci_recursivo(inteiro n){
    se (n < 2){
        retorna n;
    } senao {
        retorna fibonacci(n-1) + fibonacci(n-2);
    }
}

bloco inteiro fibonacci_for(inteiro n){
    se (n == 1){
        retorna 0;
    }
    inteiro atual = 1;
    inteiro anterior = 0;
    inteiro novo = 0;
    inteiro i = 0;
    para i de 2 ate n {
        novo = atual + anterior;
        anterior = atual;
        atual = novo;
    }
    retorna atual;
}

bloco inteiro fibonacci_while(inteiro n){
    se (n == 1){
        retorna 0;
    }
    inteiro atual = 1;
    inteiro anterior = 0;
    inteiro novo = 0;
    inteiro i = 2;
    while(i < n {
        novo = atual + anterior;
        anterior = atual;
        atual = novo;
        i = i+1;
    }
    retorna atual;
}
