bloco principal(){
    inteiro numero = 50;
    inteiro numeroNegativo = -10;
    real valor = 10.3;
    real valorNegativo = -10.3;
    booleano b1 = verdadeiro;
    booleano b2 = falso;
    texto nome = "Maria";
    
    escreva("Teste: O texto abaixo deveria ser: Meu Texto 50");

    executaOperacoes();
    	
    inteiro retorno = naoExecutaAposRetorno();
	escreva("Teste: O texto abaixo deveria ser: 1");
	escreva(retorno);

    testaSeCompleto();

    testaFibonnaci();

    escrevaNome(nome , numeroNegativo)

    para_ao_contrario()

    precedencia()

    funcoes_padroes()
}

bloco funcoes_padroes() {
    escreva("Teste: O texto abaixo deveria ser: -1");
    inteiro valorInt = como_inteiro("-1");
    escreva(valorInt);
    
    escreva("Teste: O texto abaixo deveria ser: -1");
    valorInt = como_inteiro(-1.0);
    escreva(valorInt);
    
    escreva("Teste: O texto abaixo deveria ser: -1.0");
    real valorReal = como_real(-1);
    escreva(valorReal);

    escreva("Teste: O texto abaixo deveria ser: -1.3");
    valorReal = como_real("-1.3");
    escreva(valorReal);
    
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    booleano valorBool = como_booleano("verdadeiro");
    escreva(valorBool);

    escreva("Teste: O texto abaixo deveria ser: falso");
    valorBool = como_booleano("falso");
    escreva(valorBool);
}


bloco precedencia() {
    escreva("Teste: O texto abaixo deveria ser: 8");
	inteiro operacao = 1 + 2 - 5 * (5 - 2 * 3);
    escreva(operacao);

    inteiro menos_quatro = -4

    escreva("Teste: O texto abaixo deveria ser: 17");
	operacao = 1 + 2 - 2 * (5 + menos_quatro * 3);
    escreva(operacao);

    escreva("Teste: O texto abaixo deveria ser: 17");
	operacao = -2 * (5 + menos_quatro * 3);
    escreva(operacao);

    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
	booleano resultado = 1 + 2 - 5 * (5 - 2 * 3) == 8;
    escreva(resultado);

    escreva("Teste: O texto abaixo deveria ser: falso");
    resultado = nao (verdadeiro) e falso
    escreva(resultado);

    escreva("Teste: O texto abaixo deveria ser: falso");
    resultado = nao (1 + 2 - 5 * (5 - 2 * 3) == 8) e verdadeiro ou falso
    escreva(resultado);
    
    escreva("Teste: O texto abaixo deveria ser: falso");
	resultado = nao (1 + 2 - 5 * (5 - 2 * 3) == 8);
    escreva(resultado);

    inteiro dois = 2

    escreva(1 + 2 - 5 )
    escreva(1 + dois - 5 )

    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    resultado = (1 + 2 - 5 * (5 - dois * 3) == 8) ou verdadeiro e falso
    escreva(resultado);
}


bloco testaSeCompleto() {
    escreva("Teste: O texto abaixo deveria ser: Menor que 1");
	testaSe(0);
    escreva("Teste: O texto abaixo deveria ser: Menor que 3");
    testaSe(1);
    escreva("Teste: O texto abaixo deveria ser: Menor que 5");
    testaSe(3);
    escreva("Teste: O texto abaixo deveria ser: Maior igual a 5");
    testaSe(10);
}

bloco testaSe(inteiro numero) {
    se(numero < 1){
        escreva("Menor que 1");
    } senao se(numero < 3){
        escreva("Menor que 3");
    } senao se(numero < 5){
        escreva("Menor que 5");
    } senao {
        escreva("Maior igual a 5");
    } 
}

bloco escrevaNome(texto meuTexto, inteiro valor) {
    escreva("Teste: O texto abaixo deveria ser: Maria -10");
    escreva(meuTexto+ " " +como_texto(valor));
}

bloco executaOperacoes() {
    inteiro doisInteiro = 2;
    escreva("Teste: O texto abaixo deveria ser: 3");
    escreva(1 + doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: -1");
    escreva(1 - doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: 6");
    escreva(3 * doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: 1");
    escreva(3 / doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: 1");
    escreva(5 % doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: 1");
    escreva(5 % doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(2 == doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: falso");
    escreva(2 <> doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: falso");
    escreva(2 > doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(2 >= doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: falso");
    escreva(2 < doisInteiro);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(2 <= doisInteiro);

    real doisReal = 2.0;
    escreva("Teste: O texto abaixo deveria ser: 3.0");
    escreva(1.0 + doisReal);
    escreva("Teste: O texto abaixo deveria ser: -1.0");
    escreva(1.0 - doisReal);
    escreva("Teste: O texto abaixo deveria ser: 6.0");
    escreva(3.0 * doisReal);
    escreva("Teste: O texto abaixo deveria ser: 1.5");
    escreva(3.0 / doisReal);
    escreva("Teste: O texto abaixo deveria ser: falso");
    escreva(5.0 == doisReal);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(5.0 <> doisReal);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(5.0 > doisReal);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(5.0 >= doisReal);
    escreva("Teste: O texto abaixo deveria ser: falso");
    escreva(5.0 < doisReal);
    escreva("Teste: O texto abaixo deveria ser: falso");
    escreva(5.0 <= doisReal);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(2.0 <= doisReal);
    escreva("Teste: O texto abaixo deveria ser: verdadeiro");
    escreva(2.0 >= doisReal);
    
}

bloco booleano funcaoEhMaior(inteiro n1, inteiro n2) {
    escreva("teste");
    escreva(n1);
    escreva(n1);
    booleano x = (n1) >= (n2);
    escreva(x);
    retorna x;
}

bloco booleano funcaoEhMaiorQueCinco(real n1) {
	retorna n1 > 5.0;
}

bloco inteiro naoExecutaAposRetorno() {
    retorna 1;
    retorna 2;
}


bloco testaFibonnaci() {
    escreva("Teste: Os 3 textos abaixo deveriam ser: 55");
    inteiro fibRec = fibonacci_recursivo(10);
	escreva(fibRec);

    inteiro fibWhile = fibonacci_while(10);
	escreva(fibWhile);

    inteiro fibFor = fibonacci_for(10);
	escreva(fibFor);
}


bloco inteiro fibonacci_recursivo(inteiro n) {
    se (n < 2){
        retorna n;
    } senao {
        retorna fibonacci_recursivo(n - 1) + fibonacci_recursivo(n - 2);
    }
}

bloco inteiro fibonacci_for(inteiro n){
    se (n == 1){
        retorna 0;
    }
    inteiro atual = 1;
    inteiro anterior = 0;
    inteiro novo = 0;
    inteiro i = 0;
    para i de 2 ate n {
        novo = atual + anterior;
        anterior = atual;
        atual = novo;
    }
    retorna atual;
}


bloco para_ao_contrario(){
    escreva("Teste: Os textos abaixo deveriam ser: 5, 6, 7, 8, 9, 10");

    inteiro i = 0;
    para i de 5 ate 10 {
        escreva(i);
    }

    escreva("Teste: Os textos abaixo deveriam ser: 10, 9, 8, 7, 6, 5");

    i = 0;
    para i de 10 ate 5 {
        escreva(i);
    }
}

bloco inteiro fibonacci_while(inteiro n){
    se (n == 1){
        retorna 0;
    }
    inteiro atual = 1;
    inteiro anterior = 0;
    inteiro novo = 0;
    inteiro i = 2;
    enquanto(i < n + 1) {
        novo = atual + anterior;
        anterior = atual;
        atual = novo;
        i = i+1;
    }
    retorna atual;
}