%name IVProg;

%defs (
  structure A = Ast
);

%tokens
  : KW_bloco ("bloco")
  | KW_if ("se") | KW_else ("senao")
  | CON_int of Int.int | CON_string of string | CON_real of Real.real 
  | CON_boolean of Bool.bool
  | ID of string
  | LP ("(") | RP (")") | SEMI (";")
  | LC ("{") | RC ("}")
  | COMMA (",")
  | KW_while ("enquanto") 
  | KW_for ("para") | KW_from ("de") | KW_until ("ate")
  | KW_int("inteiro") | KW_real("real") | KW_texto("texto") | KW_booleano("booleano")
  | KW_return("retorna")
  | KW_plus("+") | KW_minus("-") | KW_times("*") | KW_div("/") | KW_mod("%")
  | KW_and("e") | KW_or("ou") | KW_not("nao")
  | KW_gt(">") | KW_lt("<") | KW_equal("==") | KW_diff("<>") | KW_gte(">=") | KW_lte("<=")
  ;

%start block;

block
  : (procedure | function) block? 
  ;

procedure
  : KW_bloco ID LP formalparams? RP LC command+ RC
  ;

function
  : KW_bloco data_type ID LP formalparams? RP LC command+ RC
  ;

command
  : KW_return expression SEMI
  ;

formalparams
  : data_type ID COMMA formalparams
  | data_type ID
  ;

data_type
 : KW_int
 | KW_real
 | KW_texto
 | KW_booleano
 ;

expression
  : additive_expression
  | bool_operation
  | ID actualparams
  ;

actualparams
  : LP (expression (COMMA actualparams)*)? RP 
  ;

relational_operator
  : KW_gt | KW_lt | KW_equal | KW_diff | KW_gte | KW_lte
  ;

bool_operation
  : additive_expression relational_operator additive_expression
  | bool_operation (KW_and | KW_or) bool_operation
  | KW_not bool_operation
  | CON_boolean
  ;


literal
  : CON_int => ( A.IntConstant(CON_int) )
  | CON_string => ( A.StringConstant(CON_string) )
  | CON_real => ( A.RealConstant(CON_real) )
  ;

additive_expression
 : multiplicative_expression (( KW_plus |  KW_minus ) multiplicative_expression)*
 ;

multiplicative_expression
 : primary_expression (( KW_times | KW_div | KW_mod ) primary_expression)*
 ;

primary_expression
 : ID
 | literal
 | LP expression RP
 ;