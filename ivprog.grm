%name IVProg;

%defs (
  structure A = Ast
);

%tokens
  : KW_bloco ("bloco")
  | KW_if ("se") | KW_else ("senao")
  | CON_int of Int.int | CON_string of string | CON_real of Real.real 
  | CON_boolean of Bool.bool
  | ID of string | RELATIONAL_OP of string
  | ARITHMETIC_OP of string | BI_BOOLEAN_OP of string | UN_BOOLEAN_OP of string
  | LP ("(") | RP (")") | SEMI (";")
  | LC ("{") | RC ("}")
  | COMMA (",")
  | KW_while ("enquanto") 
  | KW_for ("para") | KW_from ("de") | KW_until ("ate")
  | KW_null("vazio")
  | KW_int("inteiro") | KW_real("real") | KW_texto("texto") | KW_booleano("booleano")
  | KW_return("retorna")
  ;

%start block;

block
  : (procedure | function) block? 
  ;

procedure
  : KW_bloco ID formalparams LC command+ RC
  ;

function
  : KW_bloco data_type ID formalparams LC command+ RC
  ;

command
  : KW_return expression SEMI
  ;

formalparams
  : LP RP => ([])
  | LP formal_params_list RP => (formal_params_list)
  ;

formal_params_list
  : data_type ID COMMA formal_params_list => ((data_type,ID)::formal_params_list)
  | data_type ID => ([(data_type,ID)])
  ;

data_type
 : KW_int
 | KW_real
 | KW_texto
 | KW_booleano
 ;

expression
  : literal
  | operation
  | ID LP actualparams? RP
  | LP expression RP
  ;

actualparams
  : expression COMMA actualparams
  | expression
  ;
  
operation
  : bool_operation
  | arithmetic_operation
  ;

bool_operation
  : expression RELATIONAL_OP expression
  | expression BI_BOOLEAN_OP expression
  | UN_BOOLEAN_OP expression
  ;

arithmetic_operation
  : expression ARITHMETIC_OP expression
  ;

literal
  : CON_int => ( A.IntConstant(CON_int) )
  | CON_string => ( A.StringConstant(CON_string) )
  | CON_real => ( A.RealConstant(CON_real) )
  | KW_null => ( A.Unit )
  ;