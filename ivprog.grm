%name IVProg;

%defs (
  structure A = Ast
);

%tokens
  : KW_bloco ("bloco")
  | KW_if ("se") | KW_else ("senao")
  | CON_int of Int.int | CON_string of string | CON_real of Real.real 
  | CON_boolean of Bool.bool
  | ID of string | RELATIONAL_OP of string
  | SUM_OP of string | MULTI_OP of string | Not("nao")
  | LP ("(") | RP (")") | SEMI (";")
  | LC ("{") | RC ("}")
  | COMMA (",") | EQ("=")
  | KW_while ("enquanto") 
  | KW_for ("para") | KW_from ("de") | KW_until ("ate")
  | KW_int("inteiro") | KW_real("real") | KW_texto("texto") | KW_booleano("booleano")
  | KW_return("retorna")
  ;

%start program;

program
  : block+ => (let
    val env = A.empty_env()
  in
    A.convert_env(env,block)
  end)
  ;

block
  : %try procedure => (procedure)
  | %try function => (function)
  ;

procedure
  : KW_bloco ID formalparams LC command+ RC => (A.create_procedure(ID, formalparams, command))
  ;

function
  : KW_bloco data_type ID formalparams LC command+ RC => (A.create_function(ID, data_type, formalparams, command))
  ;

command
  : KW_return expression SEMI => (A.Return(expression))
  | KW_while LP expression RP "{" command+ "}" => (A.While(expression,command))
  | conditional => (conditional)
  | %try KW_for ID KW_from CON_int KW_until CON_int "{" command+ "}" => (A.For(ID,CON_int1,CON_int2,command))
  | %try ID actualparams SEMI => (A.CallProc(ID, actualparams))
  | %try data_type ID EQ expression SEMI => (A.Decl(ID,data_type,expression))
  | %try ID EQ expression SEMI => (A.Attrib(ID,expression))
  ;

conditional
  : %try KW_if LP expression RP "{" command+ "}" KW_else "{" command+ "}" => (A.IfThenElse(expression,command1,command2))
  | %try KW_if LP expression RP "{" command+ "}" KW_else conditional => (A.IfThenElse(expression,command,[conditional]))
  | %try KW_if LP expression RP "{" command+ "}" => (A.IfThenElse(expression,command,[A.Skip]))
  ;

formalparams
  : %try LP RP => ([])
  | %try LP formal_params_list RP => (formal_params_list)
  ;

formal_params_list
  : %try data_type ID COMMA formal_params_list => (A.as_formal_param(data_type,ID)::formal_params_list)
  | %try data_type ID => ([A.as_formal_param(data_type,ID)])
  ;

data_type
 : KW_int => (A.KInt)
 | KW_real => (A.KReal)
 | KW_texto => (A.KText)
 | KW_booleano => (A.KBool)
 ;

actualparams
  : LP RP => ([])
  | LP actual_params_list RP => (actual_params_list)
  ;

actual_params_list
  : %try expression COMMA actual_params_list => (expression :: actual_params_list)
  | %try expression => ([expression])
  ;

expression
  : %try sum RELATIONAL_OP sum => (A.InfixApp(sum1,RELATIONAL_OP,sum2))
  | %try sum
  ;

sum
  : %try term SUM_OP term => (A.InfixApp(term1,SUM_OP,term2))
  | %try term
  ;

term
  : %try factor MULTI_OP factor => (A.InfixApp(factor1,MULTI_OP,factor2))
  | %try factor
  ;

factor
  : %try CON_int => ( A.IntConstant(CON_int) )
  | %try CON_real => ( A.RealConstant(CON_real) )
  | %try CON_string => (A.StringConstant(CON_string))
  | %try CON_boolean => (A.BoolConstant(CON_boolean))
  | %try ID actualparams => (A.CallFunc(ID, actualparams))
  | %try ID => (A.Variable(ID))
  | %try LP expression RP => (expression)
  | %try Not factor => (A.Neg factor)
  ;
