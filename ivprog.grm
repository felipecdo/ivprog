%name IVProg;

%defs (
  structure A = Ast
);

%tokens
  : KW_bloco ("bloco")
  | KW_if ("se") | KW_else ("senao")
  | CON_int of Int.int | CON_string of string | CON_real of Real.real 
  | CON_boolean of Bool.bool
  | ID of string | RELATIONAL_OP of string
  | ARITHMETIC_OP of string | BI_BOOLEAN_OP of string | UN_BOOLEAN_OP of string
  | LP ("(") | RP (")") | SEMI (";")
  | LC ("{") | RC ("}")
  | COMMA (",")
  | KW_while ("enquanto") 
  | KW_for ("para") | KW_from ("de") | KW_until ("ate")
  | KW_null("vazio")
  | KW_int("inteiro") | KW_real("real") | KW_texto("texto") | KW_booleano("booleano")
  | KW_return("retorna")
  ;

%start program;

program
  : block+ => (block)
  ;

block
  : %try procedure => (procedure)
  | %try function => (function)
  ;

procedure
  : KW_bloco ID formalparams LC command+ RC => (A.create_procedure(ID, formalparams, command))
  ;

function
  : KW_bloco data_type ID formalparams LC command+ RC => (A.create_function(ID, data_type, formalparams, command))
  ;

command
  : KW_return expression SEMI => (A.Return(expression))
  ;

formalparams
  : %try LP RP => ([])
  | %try LP formal_params_list RP => (formal_params_list)
  ;

formal_params_list
  : %try data_type ID COMMA formal_params_list => (A.as_formal_param(data_type,ID)::formal_params_list)
  | %try data_type ID => ([A.as_formal_param(data_type,ID)])
  ;

data_type
 : KW_int => (A.KInt)
 | KW_real => (A.KReal)
 | KW_texto => (A.KText)
 | KW_booleano => (A.KBool)
 ;

actualparams
  : LP RP => ([])
  | LP actual_params_list RP => (actual_params_list)
  ;

actual_params_list
  : %try expression COMMA actual_params_list => (expression :: actual_params_list)
  | %try expression => ([expression])
  ;
  
expression
  : literal => (literal)
  | ID actualparams => (A.CallFunc(ID, actualparams))
  | LP expression RP => (expression)
  ;

literal
  : CON_int => ( A.IntConstant(CON_int) )
  | CON_string => ( A.StringConstant(CON_string) )
  | CON_real => ( A.RealConstant(CON_real) )
  | KW_null => ( A.Unit )
  ;